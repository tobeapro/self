{
    "data": [
    	{
            "url": "#html/example",
            "title": "markdown自定义样式",
            "userUrl":"https://github.com/tobeapro/tobeapro.github.io?files=1",
            "userPic": "img/user.png",
            "sign": [
                "markdown",
                "css",
                "self",
                "others"
            ],
            "text": "Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。为了方便快速，本页面的文章都采用markdown书写，并自定义了部分样式。"
        },
        {
            "url": "#html/mongodb",
            "title": "vue-cli中配置mongodb",
            "userUrl":"https://github.com/tobeapro/tobeapro.github.io?files=1",
            "userPic": "img/user.png",
            "sign": [
                "js",
                "mongodb",
                "self"
            ],
            "text": "首先根目录下建立servers文件夹,在servers中新建scheame.js和index.js。安装mongoose模块，Mongoose是在node.js异步环境下对mongodb进行便捷操作的对象模型工具,简单来说就是使用mongoose来操作Mongodb。"
        },
        {
            "url": "#html/deploy",
            "title": "浅谈前端线上部署与运维",
            "userUrl":"https://juejin.im/user/58a65eafac502e006cc07db2",
            "userPic": "https://dn-mhke0kuv.qbox.me/8132eeef2c3edd765d6a.jpg?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1",
            "sign": [
                "js",
                "copy"
            ],
            "text": "说到前端部署，可能大多数前端工程师在工作中都是使用的公司现成的部署系统，与SRE对接、一起完成前端的部署操作。如果我现在给你一台新注册的云主机，那么你应该怎么做才能把一个前端工程部署到一台云主机上，成为一个可以访问的网页呢？今天我们就来聊聊前端的部署~"
        },
        {
            "url": "#html/171209A",
            "title": "Babel 入门教程",
            "userUrl":"http://www.ruanyifeng.com/blog/",
            "userPic": "http://www.ruanyifeng.com/blog/images/person2_s.jpg",
            "sign": [
                "js",
                "es6",               
                "copy",
                "babel"
            ],
            "text": "Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。下面是一个例子。"
        },
        {
            "url": "#html/cors",
            "title": "CORS实现跨域",
            "userUrl":"https://github.com/tobeapro/tobeapro.github.io?files=1",
            "userPic": "img/user.png",
            "sign": [
                "js",
                "cross-domain",
                "self"
            ],
            "text": "CORS（跨来源资源共享）是一份浏览器技术的规范，提供了Web服务从不同网域传来沙盒脚本的方法，以避开浏览器的同源策略，是JSONP模式的现代版。与JSONP不同，CORS 除了GET要求方法以外也支援其他的HTTP要求"
        }
    ]
}
